Elm.FamiliadaGame = Elm.FamiliadaGame || {};
Elm.FamiliadaGame.make = function (_elm) {
   "use strict";
   _elm.FamiliadaGame = _elm.FamiliadaGame || {};
   if (_elm.FamiliadaGame.values)
   return _elm.FamiliadaGame.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "FamiliadaGame",
   $AnswersList = Elm.AnswersList.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "AnswersListAction":
            return function () {
                 var currentQuestion = model.currentQuestion;
                 var updatedCurrentQuestions = _U.replace([["answers"
                                                           ,A2($AnswersList.update,
                                                           action._0,
                                                           currentQuestion.answers)]],
                 currentQuestion);
                 return _U.replace([["currentQuestion"
                                    ,updatedCurrentQuestions]],
                 model);
              }();
            case "NoOp": return model;}
         _U.badCase($moduleName,
         "between lines 64 and 70");
      }();
   });
   var AnswersListAction = function (a) {
      return {ctor: "AnswersListAction"
             ,_0: a};
   };
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([$Html$Attributes.$class("jumbotron")]),
      _L.fromArray([$Html.text("Familiadex")
                   ,A2($Html.div,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text("Odpowiedzi")]))
                   ,A2($AnswersList.view,
                   A2($Signal.forwardTo,
                   address,
                   AnswersListAction),
                   model.currentQuestion.answers)]));
   });
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var createAnswer = F2(function (id,
   shown) {
      return {_: {}
             ,answer: "Odpowiedz1"
             ,id: id
             ,points: 12
             ,visible: shown};
   });
   var sampleQuestion = {_: {}
                        ,answers: _L.fromArray([A2(createAnswer,
                                               1,
                                               true)
                                               ,A2(createAnswer,2,false)])
                        ,id: 1
                        ,question: "pytanie 1"};
   var initialModel = {_: {}
                      ,currentQuestion: sampleQuestion};
   var model = A3($Signal.foldp,
   update,
   initialModel,
   actions.signal);
   var main = A2($Signal.map,
   view(actions.address),
   model);
   var Question = F3(function (a,
   b,
   c) {
      return {_: {}
             ,answers: c
             ,id: a
             ,question: b};
   });
   var Model = function (a) {
      return {_: {}
             ,currentQuestion: a};
   };
   _elm.FamiliadaGame.values = {_op: _op
                               ,Model: Model
                               ,Question: Question
                               ,createAnswer: createAnswer
                               ,sampleQuestion: sampleQuestion
                               ,initialModel: initialModel
                               ,NoOp: NoOp
                               ,AnswersListAction: AnswersListAction
                               ,update: update
                               ,view: view
                               ,main: main
                               ,model: model
                               ,actions: actions};
   return _elm.FamiliadaGame.values;
};